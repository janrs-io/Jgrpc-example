// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/authservice.proto

package authPBV1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegisterAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterAuthRequestMultiError, or nil if none found.
func (m *RegisterAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccessToken()); l < 1 || l > 255 {
		err := RegisterAuthRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDuration() <= 1 {
		err := RegisterAuthRequestValidationError{
			field:  "Duration",
			reason: "value must be greater than 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterAuthRequestMultiError(errors)
	}

	return nil
}

// RegisterAuthRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterAuthRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterAuthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterAuthRequestMultiError) AllErrors() []error { return m }

// RegisterAuthRequestValidationError is the validation error returned by
// RegisterAuthRequest.Validate if the designated constraints aren't met.
type RegisterAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterAuthRequestValidationError) ErrorName() string {
	return "RegisterAuthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterAuthRequestValidationError{}

// Validate checks the field values on RegisterAuthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterAuthResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterAuthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterAuthResponseMultiError, or nil if none found.
func (m *RegisterAuthResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterAuthResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RegisterAuthResponseMultiError(errors)
	}

	return nil
}

// RegisterAuthResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterAuthResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterAuthResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterAuthResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterAuthResponseMultiError) AllErrors() []error { return m }

// RegisterAuthResponseValidationError is the validation error returned by
// RegisterAuthResponse.Validate if the designated constraints aren't met.
type RegisterAuthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterAuthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterAuthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterAuthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterAuthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterAuthResponseValidationError) ErrorName() string {
	return "RegisterAuthResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterAuthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterAuthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterAuthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterAuthResponseValidationError{}

// Validate checks the field values on GetAuthRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAuthRequestMultiError,
// or nil if none found.
func (m *GetAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccessToken()); l < 1 || l > 255 {
		err := GetAuthRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDuration() <= 1 {
		err := GetAuthRequestValidationError{
			field:  "Duration",
			reason: "value must be greater than 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAuthRequestMultiError(errors)
	}

	return nil
}

// GetAuthRequestMultiError is an error wrapping multiple validation errors
// returned by GetAuthRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthRequestMultiError) AllErrors() []error { return m }

// GetAuthRequestValidationError is the validation error returned by
// GetAuthRequest.Validate if the designated constraints aren't met.
type GetAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthRequestValidationError) ErrorName() string { return "GetAuthRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthRequestValidationError{}

// Validate checks the field values on GetAuthResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAuthResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthResponseMultiError, or nil if none found.
func (m *GetAuthResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return GetAuthResponseMultiError(errors)
	}

	return nil
}

// GetAuthResponseMultiError is an error wrapping multiple validation errors
// returned by GetAuthResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAuthResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthResponseMultiError) AllErrors() []error { return m }

// GetAuthResponseValidationError is the validation error returned by
// GetAuthResponse.Validate if the designated constraints aren't met.
type GetAuthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthResponseValidationError) ErrorName() string { return "GetAuthResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetAuthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthResponseValidationError{}

// Validate checks the field values on DestroyAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DestroyAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DestroyAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DestroyAuthRequestMultiError, or nil if none found.
func (m *DestroyAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DestroyAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccessToken()); l < 1 || l > 255 {
		err := DestroyAuthRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DestroyAuthRequestMultiError(errors)
	}

	return nil
}

// DestroyAuthRequestMultiError is an error wrapping multiple validation errors
// returned by DestroyAuthRequest.ValidateAll() if the designated constraints
// aren't met.
type DestroyAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DestroyAuthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DestroyAuthRequestMultiError) AllErrors() []error { return m }

// DestroyAuthRequestValidationError is the validation error returned by
// DestroyAuthRequest.Validate if the designated constraints aren't met.
type DestroyAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DestroyAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DestroyAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DestroyAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DestroyAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DestroyAuthRequestValidationError) ErrorName() string {
	return "DestroyAuthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DestroyAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDestroyAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DestroyAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DestroyAuthRequestValidationError{}

// Validate checks the field values on DestroyAuthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DestroyAuthResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DestroyAuthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DestroyAuthResponseMultiError, or nil if none found.
func (m *DestroyAuthResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DestroyAuthResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DestroyAuthResponseMultiError(errors)
	}

	return nil
}

// DestroyAuthResponseMultiError is an error wrapping multiple validation
// errors returned by DestroyAuthResponse.ValidateAll() if the designated
// constraints aren't met.
type DestroyAuthResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DestroyAuthResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DestroyAuthResponseMultiError) AllErrors() []error { return m }

// DestroyAuthResponseValidationError is the validation error returned by
// DestroyAuthResponse.Validate if the designated constraints aren't met.
type DestroyAuthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DestroyAuthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DestroyAuthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DestroyAuthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DestroyAuthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DestroyAuthResponseValidationError) ErrorName() string {
	return "DestroyAuthResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DestroyAuthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDestroyAuthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DestroyAuthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DestroyAuthResponseValidationError{}
